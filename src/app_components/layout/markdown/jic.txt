import { useState, useCallback } from 'react';
import { BaseEditor, Descendant, createEditor, Transforms, Editor, Text } from 'slate'
import { Slate, ReactEditor, Editable, withReact } from 'slate-react'

type CustomElement = { type?: any, bold?: any, editor?: any, children?: CustomText[] }
type CustomText = { text: string }

declare module 'slate' {
  interface CustomTypes {
    Editor: BaseEditor & ReactEditor
    Element: CustomElement
    Text: CustomText
  }
}

const CustomEditor = {
  isBoldMarkActive(editor:any) {
    const [match]:any = Editor.nodes(editor, {
      match: (n:any) => n.bold === true,
      universal: true,
    })

    return !!match
  },

  isCodeBlockActive(editor:any) {
    const [match]:any = Editor.nodes(editor, {
      match: (n:any) => n.type === 'code',
    })

    return !!match
  },

  toggleBoldMark(editor:any) {
    const isActive = CustomEditor.isBoldMarkActive(editor)
    Transforms.setNodes(
      editor,
      { bold: isActive ? null : true },
      { match: n => Text.isText(n), split: true }
    )
  },

  toggleCodeBlock(editor:any) {
    const isActive = CustomEditor.isCodeBlockActive(editor)
    Transforms.setNodes(
      editor,
      { type: isActive ? null : 'code' },
      { match: n => Editor.isBlock(editor, n) }
    )
  },
}

function App() {
  const [editor] = useState(() => withReact(createEditor()))
  const initialValue : CustomElement[] = [
    {
      type: 'paragraph',
      children: [{ text: 'A line of text in a paragraph.' }],
    },
  ]
  const [value, setValue] = useState<Descendant[]>(initialValue)

  const renderElement = useCallback((props:any) => {
    switch (props.element.type) {
      case 'code':
        return <CodeElement {...props} />
      default:
        return <DefaultElement {...props} />
    }
  }, [])

  const renderLeaf = useCallback(props => {
    return <Leaf {...props} />
  }, [])

  return (
    <Slate
      editor={editor}
      value={value}
      onChange={value => {
        setValue(value)

        const isAstChange = editor.operations.some(
          op => 'set_selection' !== op.type
        )
        if (isAstChange) {
          // Save the value to Local Storage.
          const content = JSON.stringify(value)
          localStorage.setItem('content', content)
        }
      }}
    >
      <div>
        <button
          onMouseDown={event => {
            event.preventDefault()
            CustomEditor.toggleBoldMark(editor)
          }}
        >
          Bold
        </button>
        <button
          onMouseDown={event => {
            event.preventDefault()
            CustomEditor.toggleCodeBlock(editor)
          }}
        >
          Code Block
        </button>
      </div>
      <Editable
      renderElement={renderElement}
      renderLeaf={renderLeaf}
      onKeyDown={event => {
        if (!event.ctrlKey) {
          return
        }

        // Replace the `onKeyDown` logic with our new commands.
        switch (event.key) {
          case 'c': {
            event.preventDefault()
            CustomEditor.toggleCodeBlock(editor)
            break
          }

          case 'b': {
            event.preventDefault()
            CustomEditor.toggleBoldMark(editor)
            break
          }
        }
      }}
      />
    </Slate>
  )
}

const Leaf = (props:any) => {
  return (
    <span
      {...props.attributes}
      style={{ fontWeight: props.leaf.bold ? 'bold' : 'normal' }}
    >
      {props.children}
    </span>
  )
}

const CodeElement = (props:any) => {
  return (
    <pre {...props.attributes}>
      <code>{props.children}</code>
    </pre>
  )
}

const DefaultElement = (props:any) => {
  return <p {...props.attributes}>{props.children}</p>
}

export default App;
